---
// src/components/Dashboard/PriceChart.astro
import { fetchKlines } from '../../scripts/binanceAPI.js';

export interface Props {
  symbol: string;
  chartTitle?: string;
  canvasId?: string;
}

const { symbol, chartTitle = `Historial de Precios ${symbol}`, canvasId = `chart-${symbol}-${Date.now()}` } = Astro.props;

let initialKlinesData = []; // Datos originales para la carga inicial
let error = null;
let isLoading = true;

try {
  // Obtener datos de los últimos 30 días, velas diarias para la carga inicial
  initialKlinesData = await fetchKlines(symbol, '1d', 30);
} catch (e) {
  console.error(`Error cargando datos de klines iniciales para ${symbol}:`, e.message);
  error = `No se pudieron cargar los datos del gráfico para ${symbol}.`;
} finally {
  isLoading = false;
}

// Preparar datos para la configuración inicial de Chart.js
const labels = initialKlinesData.map(kline => new Date(kline.closeTime).toLocaleDateString('es-ES', { day: 'numeric', month: 'short' }));
const dataPoints = initialKlinesData.map(kline => kline.close);

// Configuración inicial de la gráfica que se pasará al cliente
const chartConfig = {
  type: 'line',
  data: {
    labels: labels,
    datasets: [{
      label: `Precio de Cierre (${symbol})`,
      data: dataPoints,
      borderColor: 'rgba(54, 162, 235, 1)',
      backgroundColor: 'rgba(54, 162, 235, 0.2)',
      borderWidth: 2,
      tension: 0.1,
      fill: true,
    }]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      x: {
        title: { display: true, text: 'Fecha', color: '#6b7280' },
        ticks: { color: '#6b7280', maxRotation: 45, minRotation: 45 }
      },
      y: {
        title: { display: true, text: 'Precio (USD)', color: '#6b7280' },
        ticks: {
          color: '#6b7280',
          callback: function(value) {
            return value.toLocaleString('es-ES', { style: 'currency', currency: 'USD' });
          }
        }
      }
    },
    plugins: {
      legend: {
        display: true,
        position: 'top',
        labels: { color: '#6b7280' }
      },
      tooltip: {
        enabled: true,
        mode: 'index',
        intersect: false,
        callbacks: {
          label: function(context) {
            let label = context.dataset.label || '';
            if (label) label += ': ';
            if (context.parsed.y !== null) {
              label += context.parsed.y.toLocaleString('es-ES', { style: 'currency', currency: 'USD' });
            }
            return label;
          }
        }
      }
    }
  }
};
---

<div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md min-h-[350px] md:min-h-[450px]">
  <h3 class="text-xl font-semibold text-gray-700 dark:text-white mb-3">{chartTitle}</h3>
  {isLoading && (
    <div class="flex justify-center items-center h-full min-h-[300px]">
      <p class="text-gray-500 dark:text-gray-400">Cargando datos del gráfico...</p>
      <svg class="animate-spin h-6 w-6 text-blue-500 ml-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </div>
  )}
  {error && !isLoading && (
    <div class="flex justify-center items-center h-full min-h-[300px] bg-red-50 dark:bg-red-900 p-3 rounded-md">
      <p class="text-red-500 dark:text-red-400">{error}</p>
    </div>
  )}
  {!isLoading && !error && initialKlinesData.length > 0 && (
    <div class="relative h-[300px] md:h-[400px]">
      <canvas id={canvasId}></canvas>
    </div>
  )}
  {!isLoading && !error && initialKlinesData.length === 0 && (
     <div class="flex justify-center items-center h-full min-h-[300px]">
      <p class="text-gray-500 dark:text-gray-400">No hay datos disponibles para mostrar en el gráfico.</p>
    </div>
  )}
</div>

<script define:vars={{ 
  canvasId: canvasId, 
  symbol_for_client: symbol,
  chartConfig_from_astro: chartConfig,
  initialKlines_from_astro: initialKlinesData
}}>
  // Contenido para la etiqueta <script define:vars={{...}}> en PriceChart.astro

  import { Chart, LineController, LineElement, PointElement, LinearScale, TimeScale, Title, Tooltip, Legend, Filler } from 'chart.js/auto';
  import { fetchKlines } from '../../scripts/binanceAPI.js';

  // Variables pasadas desde el frontmatter de Astro
  const chartElementId = canvasId; // canvasId debe ser pasado por define:vars
  const currentSymbol = symbol_for_client; // symbol_for_client debe ser pasado por define:vars
  const initialChartConfig = chartConfig_from_astro; // chartConfig_from_astro debe ser pasado por define:vars
  const initialKlines = initialKlines_from_astro; // initialKlines_from_astro debe ser pasado por define:vars

  let chartInstance = null;
  const MAX_DATAPOINTS = 30 * 6; // 30 días * 6 velas de 4h/día = 180

  const formatKlineTimeToLabel = (klineTime) => {
    return new Date(klineTime).toLocaleDateString('es-ES', { day: 'numeric', month: 'short', hour: 'numeric', minute: 'numeric' });
  };

  async function updateChartData() {
    if (!chartInstance || !currentSymbol) {
      console.warn("Instancia de gráfica o símbolo no disponible para actualización.");
      return;
    }

    try {
      // console.log(`Fetching recent klines for ${currentSymbol}`);
      const recentKlines = await fetchKlines(currentSymbol, '4h', 15); // Pedir algunas velas más por si acaso

      if (!recentKlines || recentKlines.length === 0) {
        // console.log(`No se recibieron klines recientes para ${currentSymbol}`);
        return;
      }

      let chartNeedsUpdate = false;
      const currentLabels = chartInstance.data.labels;
      const currentDataPoints = chartInstance.data.datasets[0].data;
      // Acceder a los klines originales almacenados en la configuración de la instancia del gráfico
      const originalKlinesInChart = chartInstance.config.originalKlinesData;

      const lastOriginalKlineTime = originalKlinesInChart.length > 0 ?
                                    new Date(originalKlinesInChart[originalKlinesInChart.length - 1].openTime).getTime() : 0;

      for (const newKline of recentKlines) {
        const newKlineOpenTime = new Date(newKline.openTime).getTime();
        const existingKlineIndex = originalKlinesInChart.findIndex(origKline => new Date(origKline.openTime).getTime() === newKlineOpenTime);

        if (existingKlineIndex !== -1) { // Vela existente, considerar actualización
          if (originalKlinesInChart[existingKlineIndex].close !== newKline.close) {
            currentDataPoints[existingKlineIndex] = newKline.close;
            originalKlinesInChart[existingKlineIndex].close = newKline.close;
            // También se podrían actualizar high, low, volume si se muestran o usan
            chartNeedsUpdate = true;
          }
        } else { // Vela nueva
          // Añadir solo si es estrictamente más reciente que la última que tenemos en el array original
          if (newKlineOpenTime > lastOriginalKlineTime) {
            currentLabels.push(formatKlineTimeToLabel(newKline.closeTime));
            currentDataPoints.push(newKline.close);
            originalKlinesInChart.push(JSON.parse(JSON.stringify(newKline))); // Añadir copia del objeto kline completo
            chartNeedsUpdate = true;
          }
        }
      }

      if (chartNeedsUpdate) {
        while (currentLabels.length > MAX_DATAPOINTS) {
          currentLabels.shift();
          currentDataPoints.shift();
          originalKlinesInChart.shift();
        }
        chartInstance.update();
      }
    } catch (error) {
      console.error(`Error actualizando datos del gráfico para ${currentSymbol}:`, error.message, error);
    }
  } // Cierre de updateChartData

  document.addEventListener('DOMContentLoaded', () => {
    const ctx = document.getElementById(chartElementId);
    if (ctx) {
      let existingChart = Chart.getChart(chartElementId);
      if (existingChart) {
        existingChart.destroy();
      }

      // Es crucial clonar la configuración para evitar mutaciones entre instancias si se reutiliza el config base.
      const currentChartConfig = JSON.parse(JSON.stringify(initialChartConfig));
      
      // Adjuntar los klines iniciales (completos y clonados) a la configuración del gráfico.
      // Esto permite que updateChartData acceda a los datos originales para comparaciones.
      currentChartConfig.originalKlinesData = JSON.parse(JSON.stringify(initialKlines)); 

      chartInstance = new Chart(ctx, currentChartConfig);

      const chartUpdateInterval = setInterval(updateChartData, 30000);
      
      document.addEventListener('astro:before-swap', () => {
        clearInterval(chartUpdateInterval);
        if (chartInstance) {
          chartInstance.destroy();
          chartInstance = null;
        }
      });
    } else {
      console.error(`Canvas con ID ${chartElementId} no encontrado.`);
    }
  }); // Cierre de DOMContentLoaded
</script>
```
